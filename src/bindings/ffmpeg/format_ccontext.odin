package ffmpeg

import "core:c"

CodecTag :: struct {}
InputFormat :: struct {
	name: cstring,
	long_name: cstring,
	flags: c.int,
	extensions: cstring,
	codec_tag: ^^CodecTag,
	priv_class: ^Class,
	mime_type: cstring,
}
OutputFormat :: struct {
	name: cstring,
	long_name: cstring,
	mime_type: cstring,
	extensions: cstring,
	audio_codec: CodecID,
	video_codec: CodecID,
	subtitle_codec: CodecID,
	flags: c.int,
	codec_tag: ^^CodecTag,
	priv_class: ^Class,
}
IOContext :: struct {}
StreamGroup :: struct {}
Chapter :: struct {}
Program :: struct {}

FormatContext :: struct {
	av_class: ^Class,
	iformat: ^InputFormat,
	oformat: ^OutputFormat,
	priv_data: rawptr,
	pb: ^IOContext,
	ctx_flags: c.int,
	nb_streams: c.uint,
	streams: [^]^Stream,
	nb_stream_groups: c.uint,
	stream_groups: [^]StreamGroup,
	nb_chapters: c.uint,
	chapters: [^]Chapter,
	url: cstring,
	start_time: i64,
	duration: i64,
	bit_rate: i64,
	packet_size: c.uint,
	max_delay: c.int,
	flags: c.int,
	probesize: i64,
	max_analyze_duration: i64,
	key: [^]u8,
	keylen: c.int,
	nb_programs: c.uint,
	programs: [^]Program,
	video_codec_id: CodecID,
	audio_codec_id: CodecID,
	subtitle_codec_id: CodecID,
	data_codec_id: CodecID,
	metadata: ^Dictionary,
	start_time_realtime: i64,
	fps_probe_size: c.int,
	error_recognition: c.int,
	// AVIOInterruptCB interrupt_callback;
	interrupt_callback: rawptr,
	debug: c.int,
	max_streams: c.int,
	max_index_size: c.uint,
	max_picture_buffer: c.uint,
	max_interleave_delta: i64,
	max_ts_probe: c.int,
	max_chunk_duration: c.int,
	max_chunk_size: c.int,
	max_probe_packets: c.int,
	strict_std_compliance: c.int,
	event_flags: c.int,
	avoid_negative_ts: c.int,
	audio_preload: c.int,
	use_wallclock_as_timestamps: c.int,
	skip_estimate_duration_from_pts: c.int,
	avio_flags: c.int,
	duration_estimation_method: enum c.int {},
	skip_initial_bytes: i64,
	correct_ts_overflow: c.uint,
	seek2any: c.int,
	flush_packets: c.int,
	probe_score: c.int,
	format_probesize: c.int,
	codec_whitelist: cstring,
	format_whitelist: cstring,
	protocol_whitelist: cstring,
	protocol_blacklist: cstring,
	io_repositioned: c.int,
	video_codec: ^Codec,
	audio_codec: ^Codec,
	subtitle_codec: ^Codec,
	data_codec: ^Codec,
	metadata_header_padding: c.int,
	opaque: rawptr,
	// av_format_control_message_cb
	control_message_cb: rawptr,
	output_ts_offset: i64,
	dump_separator: [^]u8,

	io_open: rawptr,
	io_close2: rawptr,

	duration_probesize: c.int,
}
